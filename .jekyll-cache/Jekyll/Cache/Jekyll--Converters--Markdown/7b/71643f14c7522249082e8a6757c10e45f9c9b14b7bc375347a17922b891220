I"“8<p>I attended a Software Carpentry workshop that teaches basic research computing skills. The following useful reference materials are taken from their GitHub pages on [shell scripting]](https://swcarpentry.github.io/shell-novice/reference/), <a href="https://swcarpentry.github.io/python-novice-inflammation/reference/">Python</a>, and <a href="https://swcarpentry.github.io/git-novice/reference">git</a>. These are really useful so I highly recommend using them for basic reference. Advanced version is <a href="https://intermediate-and-advanced-software-carpentry.readthedocs.io/en/latest/">here</a>
<!--more--></p>

<h2 id="bash-shell">Bash shell</h2>

<h1 id="working-with-files-and-directories-and-pipe-and-filters">Working with files and directories and pipe and filters</h1>

<ul>
  <li>command is a small program that does something (e.g. usage: <code class="highlighter-rouge">command [-flag] [arguments]</code>)</li>
  <li>4 types of contents in a directory: directory, file, executable program (*), symbolic link (@)</li>
  <li><code class="highlighter-rouge">cat filename</code> print file content to prompt, can be piped into a text file</li>
  <li><code class="highlighter-rouge">*</code> wild card. <code class="highlighter-rouge">[AB]</code> matches either an ‚ÄòA‚Äô or a ‚ÄòB‚Äô</li>
  <li><code class="highlighter-rouge">man commandName</code> to get help for the command (<code class="highlighter-rouge">b</code> to go up the page, <code class="highlighter-rouge">space</code> to go down)</li>
  <li><code class="highlighter-rouge">head -n</code> prints n lines from the start of a file</li>
  <li><code class="highlighter-rouge">tail -n</code> prints n lines from the end of a file</li>
  <li><code class="highlighter-rouge">cd</code> to go to home directory, <code class="highlighter-rouge">cd -</code> to back to the previous directory</li>
  <li><code class="highlighter-rouge">mv dir1 dir2</code> moves dir1 and all its files into dir2. Can also move files. No <code class="highlighter-rouge">-r</code> needed</li>
  <li><code class="highlighter-rouge">cp -r dir1 dir2</code> copies dir1 and all its files into dir2</li>
  <li><code class="highlighter-rouge">rm -ri</code> remove files. <code class="highlighter-rouge">-i</code> prompts warning before executing command</li>
  <li><code class="highlighter-rouge">wc -l/w/m</code> is the ‚Äúword count‚Äù command: it counts the number of lines (<code class="highlighter-rouge">-l</code>), words (<code class="highlighter-rouge">-w</code>), and characters (<code class="highlighter-rouge">-m</code>) in files (from left to right, in that order)</li>
  <li><code class="highlighter-rouge">touch</code> create a generic file (not necessarily a text file) that can be appended to, or can act as notification for job arrays</li>
  <li><code class="highlighter-rouge">less</code> displays a screenful of the file. You can go forward one screenful by pressing the <code class="highlighter-rouge">spacebar</code>, or back one by pressing <code class="highlighter-rouge">b</code>. Press <code class="highlighter-rouge">q</code> to quit</li>
  <li><code class="highlighter-rouge">&gt;</code> writes text to file, and overwrites the file each time we run the command</li>
  <li><code class="highlighter-rouge">&gt;&gt;</code> also writes text to file, but appends the string to the file if it already exists (i.e. when we run it for the second time)</li>
  <li><code class="highlighter-rouge">|</code> is called a pipe. It tells the shell that we want to use the output of the command on the left as the input to the command on the right</li>
  <li>‚Äúpipes and filters‚Äù programming model links programs together. A filter is a program like <code class="highlighter-rouge">wc</code> or <code class="highlighter-rouge">sort</code> that transforms a stream of input into a stream of output. Any program that reads lines of text from standard input and writes lines of text to standard output can be combined with every other program that behaves this way as well. You can and should write your programs this way so that you and other people can put those programs into pipes to multiply their power.</li>
  <li><code class="highlighter-rouge">cut -d , -f 2</code> removes or ‚Äúcut out‚Äù certain sections of each line in the file. The optional <code class="highlighter-rouge">-d</code> flag defines the delimiter, or splitting parameter (default is <code class="highlighter-rouge">tab</code>). <code class="highlighter-rouge">-f</code> specifies the field (column) to cut out</li>
  <li><code class="highlighter-rouge">uniq</code> filters out <strong>adjacent</strong> matching lines in a file. <code class="highlighter-rouge">-c</code> flag gives a count of the number of times a line occurs in its input.</li>
  <li><code class="highlighter-rouge">&lt;</code> operator redirects input to a command</li>
  <li>shortcut: in command prompt with a long line of words, <code class="highlighter-rouge">opt+arrows</code> to jump words, <code class="highlighter-rouge">ctrl+a</code> to go to the beginning, <code class="highlighter-rouge">ctrl+e</code> to go to the end</li>
  <li>name files or directories from most general to more specific to allow easier search</li>
  <li><code class="highlighter-rouge">!$</code> retrieves the last word of the last command</li>
  <li><code class="highlighter-rouge">ctrl+r</code> search previous history</li>
</ul>

<h1 id="for-loops">For loops</h1>

<p>For loops in shell scripting:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for thing in list_of_things
do
    operation_using $thing    # Indentation within the loop is not required, but aids legibility
done
</code></pre></div></div>
<p>This is useful for going through files and do something with each of them.</p>
<ul>
  <li>A loop is a way to do many things at once ‚Äî or to make many mistakes at once if it does the wrong thing. One way to check what a loop would do is to echo the commands it would run instead of actually running them.</li>
  <li><code class="highlighter-rouge">echo "do $something"</code> prints to screen everything enclosed in the quote marks. It redirects the output from the command</li>
  <li><code class="highlighter-rouge">echo do $something</code> expands the loop variable name</li>
</ul>

<h1 id="shell-scripts">Shell scripts</h1>

<ul>
  <li>to make and run a shell script, make <code class="highlighter-rouge">middle.sh</code>:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>head -n 15 $1 | tail -n 5
</code></pre></div>    </div>
    <p>then run using</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash middle.sh octane.pdb
</code></pre></div>    </div>
    <p>where <code class="highlighter-rouge">$1</code> is the first argument (e.g. octane.pdb) from the input.</p>
  </li>
  <li>To set a variable, do (without space):
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test_var=20
</code></pre></div>    </div>
    <p>invoke the variable using</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo $test_var
</code></pre></div>    </div>
  </li>
  <li><code class="highlighter-rouge">grep expression filename</code> search for <code class="highlighter-rouge">expression</code> in <code class="highlighter-rouge">filename</code>. Lots of options are available for more specific searchf</li>
</ul>

<h2 id="python">Python</h2>

<h1 id="defensive-programming">Defensive programming</h1>

<ul>
  <li>Program defensively, i.e., assume that errors are going to arise, and write code to detect them when they do.</li>
  <li>Put assertions in programs to check their state as they run, and to help readers understand how those programs are supposed to work.</li>
  <li>Use preconditions to check that the inputs to a function are safe to use.</li>
  <li>Use postconditions to check that the output from a function is safe to use.</li>
  <li>
    <p>Write tests before writing code in order to help determine exactly what that code is supposed to do.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">plt.tight_layout()</code> removes white space when making figures</p>
  </li>
  <li>for loops using <code class="highlighter-rouge">enumerate</code>:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for i, character in enumerate(word):
  print(i, character)
</code></pre></div>    </div>
  </li>
  <li>lambda</li>
  <li>deep copy</li>
</ul>

<h2 id="git">Git</h2>

<ul>
  <li><code class="highlighter-rouge">ctrl+l</code> clears the terminal screen</li>
  <li><code class="highlighter-rouge">.gitignore</code> is a text file that contains the list of all files you don‚Äôt want git to track changes</li>
  <li><code class="highlighter-rouge">gif config</code> to change default preferences</li>
  <li>The idea of adding and committing:
<img src="https://swcarpentry.github.io/git-novice/fig/git-staging-area.svg" alt="git" /></li>
  <li>Example workflow:
    <ol>
      <li><code class="highlighter-rouge">git init</code> # creates an empty .git directory in a new directory to keep track of change history</li>
      <li><code class="highlighter-rouge">git status</code></li>
      <li><code class="highlighter-rouge">vi mars.txt</code></li>
      <li><code class="highlighter-rouge">git add mars.txt</code> # gets file changes ready for commit locally</li>
      <li><code class="highlighter-rouge">git commit -m 'change 1'</code> # adds file to staging area and assign the change an unique ID. You can commit multiple ‚Äúadds‚Äù together (assigned to one ID) to keep track of them all as a single package in the change history.</li>
      <li><code class="highlighter-rouge">vi mars.txt</code> # makes changes to the working copy of the file</li>
      <li><code class="highlighter-rouge">git diff HEAD~$VERSION_NUM mars.txt</code> # shows changes between commit and working copy (before <code class="highlighter-rouge">add</code>). <code class="highlighter-rouge">$VERSION_NUM</code> is the version number you want to compare the current version to. No <code class="highlighter-rouge">$VERSION_NUM</code> means most current version</li>
      <li><code class="highlighter-rouge">git commit -m 'change 2'</code> # add further message</li>
      <li><code class="highlighter-rouge">git log</code> # shows history of changes</li>
      <li><code class="highlighter-rouge">git checkout HEAD~$VERSION_NUM mars.txt</code> # reverses change (but does not delete new changes), i.e. replaces the working copy with the most recently committed version. <code class="highlighter-rouge">$VERSION_NUM</code> is the version number you want to revert to</li>
      <li><code class="highlighter-rouge">git stash</code> # put all uncommitted changes to ‚Äústash‚Äù directory</li>
      <li><code class="highlighter-rouge">git revert</code> # ? Deletes files when reverting commit?</li>
      <li><code class="highlighter-rouge">git pull origin master</code> # pull changes from remote repo (origin)into local machine (master)</li>
      <li><code class="highlighter-rouge">git remote add origin git@github.com:...</code> # link local repo to remote repo</li>
      <li><code class="highlighter-rouge">git push -u origin master</code> # push changes from local repo to remote repo</li>
    </ol>
  </li>
</ul>

<h2 id="python-1">Python</h2>

<ul>
  <li>To install new <a href="https://github.com/ipython-contrib/jupyter_contrib_nbextensions">extensions</a> in jupyter notebook</li>
  <li><code class="highlighter-rouge">glob</code> finds files and directories whose names match a pattern</li>
</ul>

<h1 id="defensive-programming-1">Defensive programming</h1>

<p>Make programs assuming that mistakes will happen and to guard against them.</p>
<ul>
  <li>An assertion is simply a statement that checks something to be true at a certain point in a program. It also helps people understand programs. Each assertion gives the person reading the program a chance to check (consciously or otherwise) that their understanding matches what the code is doing.</li>
  <li>Most good programmers follow two rules when adding assertions to their code.
    <ol>
      <li><strong>Fail early, fail often.</strong> The greater the distance between when and where an error occurs and when it‚Äôs noticed, the harder the error will be to debug, so good code catches mistakes as early as possible.</li>
      <li><strong>Turn bugs into assertions or tests.</strong> Whenever you fix a bug, write an assertion that catches the mistake should you make it again. If you made a mistake in a piece of code, the odds are good that you have made other mistakes nearby, or will make the same mistake (or a related one) the next time you change it. Writing assertions to check that you haven‚Äôt regressed (i.e., haven‚Äôt re-introduced an old problem) can save a lot of time in the long run, and helps to warn people who are reading the code (including your future self) that this bit is tricky.</li>
    </ol>
  </li>
  <li>Three main types:
    <ol>
      <li>A <strong>precondition</strong> is something that must be true at the start of a function in order for it to work correctly</li>
      <li>A <strong>postcondition</strong> is something that the function guarantees is true when it finishes</li>
      <li>An <strong>invariant</strong> is something that is always true at a particular point inside a piece of code</li>
    </ol>
  </li>
  <li>e.g.
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>assert len(rect) == 4, 'Rectangles must contain 4 coordinates'
</code></pre></div>    </div>
  </li>
  <li>print progress of program often to keep track of potential errors, and to inform about its status</li>
  <li>print errors with as much relevant information as possible</li>
</ul>

<h1 id="test-driven-development">Test-Driven Development</h1>

<ul>
  <li>Steps:
    <ol>
      <li>Write a short function for each test.</li>
      <li>Write a range_overlap function that should pass those tests.</li>
      <li>If range_overlap produces any wrong answers, fix it and re-run the test functions.</li>
    </ol>
  </li>
  <li>Writing the tests before writing the function they exercise is called test-driven development (TDD)</li>
  <li><code class="highlighter-rouge">python -i myscript.py</code> runs the script interactively, then keeps all the variables in memory so you can access them.</li>
</ul>
:ET