I"ý<h1 id="guide-to-running-matlab-jobarray-jobs-on-hoffman2">Guide to running MATLAB jobarray jobs on Hoffman2</h1>

<ol>
  <li>
    <p>Log onto Hoffman2 using terminal using ssh <code class="highlighter-rouge">*user_name*@hoffman2.idre.ucla.edu</code> or using <a href="https://www.hoffman2.idre.ucla.edu/access/nx/">NoMachine</a>.</p>
  </li>
  <li>
    <p>Request compute node: <code class="highlighter-rouge">qrsh -l h_rt=8:00:00,h_data=32G,highmem,highp</code> (see this <a href="https://idre.ucla.edu/wp-content/uploads/2015/11/h2_20151005.pdf?a2f05c">Using Hoffman2 Cluster</a> guide for details on the explanation of optional parameters). If you want to request group-specific Nvidia GPU nodes (e.g. P4 or K40), simply append them to the end of the request command (e.g. â€¦highmem,highp,K40).</p>
  </li>
  <li>
    <p>Navigate to the directory containing the MATLAB script you want to compile and run, then compile your MATLAB scripts using the mcc MATLAB compiler, <code class="highlighter-rouge">mcc -m file-name.m -I ~/path/to/directories/containing/dependencies -I ~/path/to/other/dependencies</code>. This will compile a MATLAB executable <strong>file-name</strong> (without .m extension) that can run independent of MATLB on compute cluster.</p>
  </li>
  <li>
    <p>Generate a MATLAB command (.cmd) script for submitting a job to run the executable on remote compute node: <code class="highlighter-rouge">matexe.q -ns -o ~/job-output file-name</code>. This will generate a <strong>file-name.cmd</strong>. Note: Do not include the .m extension when performing matexe.q.</p>
  </li>
  <li>
    <p>If you are NOT running a jobarray and only want to execute your MATLAB script as is, then you can use a text editor of your choice (e.g. emac, vim) to edit <strong>file-name.cmd</strong> (the <code class="highlighter-rouge">-l ...</code> line) to specify resource requests and then submit the command file to queue (see below). If you want to run a jobarray, then you also need to specify the parameter to submit with each job. A sample command file for <strong>sampleScript.m</strong> is shown below:</p>
  </li>
</ol>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#!/bin/csh -f
#  sampleScript.cmd
#
#  UGE job for sampleScript built Wed Aug  7 22:30:05 PDT 2019
#
#  The following items pertain to this script
#  Use current working directory
#$ -cwd
#  input           = /dev/null
#  output          = /u/home/y/y1lo/job-output/sampleScript.joblog.$JOB_ID
#$ -o /u/home/y/y1lo/job-output/sampleScript.joblog.$JOB_ID
#  error           = Merged with joblog
#$ -j y
#  The following items pertain to the user program
#  user program    = /u/project/miao/y1lo/fib_genfire/scripts/sampleScript
#  arguments       = 
#  program input   = Specified by user program
#  program output  = Specified by user program
#  Resources requested
#
#$ -l h_data=16G,h_rt=2:00:00
#$ -t 1-121:1
#
# #
#  Name of application for log
#$ -v QQAPP=job
#  Email address to notify
#$ -M y1lo@mail
#$ -m bea
#  Job is not rerunable
#$ -r n
#
# Initialization for serial execution
#  
  unalias *
  set PROJECT_NAME="sAETGDFNarray70Tilt65Deg/"
  set qqversion = 
  set qqapp     = "job serial"
  set qqmtasks  = 8
  set qqidir    = /u/project/miao/y1lo/fib_genfire/scripts
  set qqjob     = sampleScript
  set qqodir    = /u/home/y/y1lo/job-output
  cd     /u/project/miao/y1lo/fib_genfire/scripts
  source /u/local/bin/qq.sge/qr.runtime
  if ($status != 0) exit (1)
#
  echo "UGE job for sampleScript built Wed Aug  7 22:30:05 PDT 2019"
  echo ""
  echo "  sampleScript directory:"
  echo "    "/u/project/miao/y1lo/fib_genfire/scripts
  echo "  Submitted to UGE:"
  echo "    "$qqsubmit
  echo "  SCRATCH directory:"
  echo "    "$qqscratch
#
  echo ""
  echo "sampleScript started on:   "` hostname -s `
  echo "sampleScript started at:   "` date `
  echo ""
#
  source /u/local/Modules/default/init/modules.csh
  module load matlab
  setenv MCR_CACHE_ROOT $TMPDIR
#
# Run the user program
#
  echo sampleScript "" \&gt;\&amp; sampleScript.output.$JOB_ID
  echo ""
  time /u/project/miao/y1lo/fib_genfire/scripts/sampleScript $SGE_TASK_ID $PROJECT_NAME &gt;&amp; /u/home/y/y1lo/job-output/sampleScript.output.$JOB_ID
#
  echo ""
  echo "sampleScript finished at:  " 'date' 
#
# Cleanup after serial execution
#
  source /u/local/bin/qq.sge/qr.runtime
#
  echo "-------- /u/home/y/y1lo/job-output/sampleScript.joblog.$JOB_ID --------" &gt;&gt; /u/local/apps/queue.logs/job.log.serial
 if (`wc -l /u/home/y/y1lo/job-output/sampleScript.joblog.$JOB_ID  | awk '{print $1}'` &gt;= 1000) then
        head -50 /u/home/y/y1lo/job-output/sampleScript.joblog.$JOB_ID &gt;&gt; /u/local/apps/queue.logs/job.log.serial
        echo " "  &gt;&gt; /u/local/apps/queue.logs/job.log.serial
        tail -10 /u/home/y/y1lo/job-output/sampleScript.joblog.$JOB_ID &gt;&gt; /u/local/apps/queue.logs/job.log.serial
  else
        cat /u/home/y/y1lo/job-output/sampleScript.joblog.$JOB_ID &gt;&gt; /u/local/apps/queue.logs/job.log.serial
  endif
  exit (0)
</code></pre></div></div>

<p>Specifically, the lines to edit/add are</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#$ -l h_data=16G,h_rt=2:00:00
#$ -t 1-121:1
</code></pre></div></div>
<p>The option <code class="highlighter-rouge">-l ...</code> is for requesting the amount of resources for each compute node, much the same way you request a compute node when you first log onto Hoffman2. The option <code class="highlighter-rouge">-t 1-121:1</code> means each copy of your MATLAB executable that is running in a remote compute node will receive an input value (in type string) ranging from 1 to 121 in increments of 1 (there will be a total of 121 jobs). After you have defined the range of input variables, you need to somehow give this to the executable. This is achieved in line</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>time /u/project/miao/y1lo/fib_genfire/scripts/sampleScript $SGE_TASK_ID $PROJECT_NAME &gt;&amp; /u/home/y/y1lo/job-output/
</code></pre></div></div>
<p>by adding the <code class="highlighter-rouge">$SGE_TASK_ID</code> variable after the call to the executable. FYI, you can specify additional variables if your function takes in multiple variables. Here <code class="highlighter-rouge">$PROJECT_NAME</code> is another variable for sampleScript.m.</p>

<ol>
  <li>
    <p>Submit the edited command file <strong>file-name.cmd</strong> to Hoffman2 job scheduler queue to run: <code class="highlighter-rouge">qsub file-name.cmd</code>.</p>
  </li>
  <li>
    <p>You can monitor the status of your jobs by running <code class="highlighter-rouge">watch myjob</code>. This will continuously monitor the job queue. When the jobs are first submitted, they are in queue waiting (qw). If you request light resources, the jobs should run soon (&lt;1 min) after submission (qw to r). If your jobs terminate right after running then thereâ€™s probably a bug in the code somewhere. You can get more information by checking the job output, stored in ~/job-output/file-name.output.job_id.</p>
  </li>
</ol>
:ET