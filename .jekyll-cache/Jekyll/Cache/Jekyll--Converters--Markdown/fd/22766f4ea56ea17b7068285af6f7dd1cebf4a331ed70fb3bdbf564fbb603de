I"v!<p>I attended a Software Carpentry workshop that teaches basic research computing skills. The following useful reference materials are taken from their GitHub pages on [shell scripting]](https://swcarpentry.github.io/shell-novice/reference/), <a href="https://swcarpentry.github.io/python-novice-inflammation/reference/">Python</a>, and <a href="https://swcarpentry.github.io/git-novice/reference">git</a>. These are really useful so I highly recommend using them for basic reference. Advanced version is <a href="https://intermediate-and-advanced-software-carpentry.readthedocs.io/en/latest/">here</a></p>

<h2 id="bash-shell">Bash shell</h2>

<h1 id="working-with-files-and-directories-and-pipe-and-filters">Working with files and directories and pipe and filters</h1>

<ul>
  <li>command is a small program that does something (e.g. usage: <code class="highlighter-rouge">command [-flag] [arguments]</code>)</li>
  <li>4 types of contents in a directory: directory, file, executable program (*), symbolic link (@)</li>
  <li><code class="highlighter-rouge">cat filename</code> print file content to prompt, can be piped into a text file</li>
  <li><code class="highlighter-rouge">*</code> wild card. <code class="highlighter-rouge">[AB]</code> matches either an ‘A’ or a ‘B’</li>
  <li><code class="highlighter-rouge">man commandName</code> to get help for the command (<code class="highlighter-rouge">b</code> to go up the page, <code class="highlighter-rouge">space</code> to go down)</li>
  <li><code class="highlighter-rouge">head -n</code> prints n lines from the start of a file</li>
  <li><code class="highlighter-rouge">tail -n</code> prints n lines from the end of a file</li>
  <li><code class="highlighter-rouge">cd</code> to go to home directory, <code class="highlighter-rouge">cd -</code> to back to the previous directory</li>
  <li><code class="highlighter-rouge">mv dir1 dir2</code> moves dir1 and all its files into dir2. Can also move files. No <code class="highlighter-rouge">-r</code> needed</li>
  <li><code class="highlighter-rouge">cp -r dir1 dir2</code> copies dir1 and all its files into dir2</li>
  <li><code class="highlighter-rouge">rm -ri</code> remove files. <code class="highlighter-rouge">-i</code> prompts warning before executing command</li>
  <li><code class="highlighter-rouge">wc -l/w/m</code> is the “word count” command: it counts the number of lines (<code class="highlighter-rouge">-l</code>), words (<code class="highlighter-rouge">-w</code>), and characters (<code class="highlighter-rouge">-m</code>) in files (from left to right, in that order)</li>
  <li><code class="highlighter-rouge">touch</code> create a generic file (not necessarily a text file) that can be appended to, or can act as notification for job arrays</li>
  <li><code class="highlighter-rouge">less</code> displays a screenful of the file. You can go forward one screenful by pressing the <code class="highlighter-rouge">spacebar</code>, or back one by pressing <code class="highlighter-rouge">b</code>. Press <code class="highlighter-rouge">q</code> to quit</li>
  <li><code class="highlighter-rouge">&gt;</code> writes text to file, and overwrites the file each time we run the command</li>
  <li><code class="highlighter-rouge">&gt;&gt;</code> also writes text to file, but appends the string to the file if it already exists (i.e. when we run it for the second time)</li>
  <li><code class="highlighter-rouge">|</code> is called a pipe. It tells the shell that we want to use the output of the command on the left as the input to the command on the right</li>
  <li>“pipes and filters” programming model links programs together. A filter is a program like <code class="highlighter-rouge">wc</code> or <code class="highlighter-rouge">sort</code> that transforms a stream of input into a stream of output. Any program that reads lines of text from standard input and writes lines of text to standard output can be combined with every other program that behaves this way as well. You can and should write your programs this way so that you and other people can put those programs into pipes to multiply their power.</li>
  <li><code class="highlighter-rouge">cut -d , -f 2</code> removes or “cut out” certain sections of each line in the file. The optional <code class="highlighter-rouge">-d</code> flag defines the delimiter, or splitting parameter (default is <code class="highlighter-rouge">tab</code>). <code class="highlighter-rouge">-f</code> specifies the field (column) to cut out</li>
  <li><code class="highlighter-rouge">uniq</code> filters out <strong>adjacent</strong> matching lines in a file. <code class="highlighter-rouge">-c</code> flag gives a count of the number of times a line occurs in its input.</li>
  <li><code class="highlighter-rouge">&lt;</code> operator redirects input to a command</li>
  <li>shortcut: in command prompt with a long line of words, <code class="highlighter-rouge">opt+arrows</code> to jump words, <code class="highlighter-rouge">ctrl+a</code> to go to the beginning, <code class="highlighter-rouge">ctrl+e</code> to go to the end</li>
  <li>name files or directories from most general to more specific to allow easier search</li>
  <li><code class="highlighter-rouge">!$</code> retrieves the last word of the last command</li>
  <li><code class="highlighter-rouge">ctrl+r</code> search previous history</li>
</ul>

<h1 id="for-loops">For loops</h1>

<p>For loops in shell scripting:</p>
<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for thing in list_of_things
do
    operation_using $thing    # Indentation within the loop is not required, but aids legibility
done
</code></pre></div></div>
<p>This is useful for going through files and do something with each of them.</p>
<ul>
  <li>A loop is a way to do many things at once — or to make many mistakes at once if it does the wrong thing. One way to check what a loop would do is to echo the commands it would run instead of actually running them.</li>
  <li><code class="highlighter-rouge">echo "do $something"</code> prints to screen everything enclosed in the quote marks. It redirects the output from the command</li>
  <li><code class="highlighter-rouge">echo do $something</code> expands the loop variable name</li>
</ul>

<h1 id="shell-scripts">Shell scripts</h1>

<ul>
  <li>to make and run a shell script, make <code class="highlighter-rouge">middle.sh</code>:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>head -n 15 $1 | tail -n 5
</code></pre></div>    </div>
    <p>then run using</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>bash middle.sh octane.pdb
</code></pre></div>    </div>
    <p>where <code class="highlighter-rouge">$1</code> is the first argument (e.g. octane.pdb) from the input.</p>
  </li>
  <li>To set a variable, do (without space):
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>test_var=20
</code></pre></div>    </div>
    <p>invoke the variable using</p>
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>echo $test_var
</code></pre></div>    </div>
  </li>
  <li><code class="highlighter-rouge">grep expression filename</code> search for <code class="highlighter-rouge">expression</code> in <code class="highlighter-rouge">filename</code>. Lots of options are available for more specific searchf</li>
</ul>

<h2 id="python">Python</h2>

<h1 id="defensive-programming">Defensive programming</h1>

<ul>
  <li>Program defensively, i.e., assume that errors are going to arise, and write code to detect them when they do.</li>
  <li>Put assertions in programs to check their state as they run, and to help readers understand how those programs are supposed to work.</li>
  <li>Use preconditions to check that the inputs to a function are safe to use.</li>
  <li>Use postconditions to check that the output from a function is safe to use.</li>
  <li>
    <p>Write tests before writing code in order to help determine exactly what that code is supposed to do.</p>
  </li>
  <li>
    <p><code class="highlighter-rouge">plt.tight_layout()</code> removes white space when making figures</p>
  </li>
  <li>for loops using <code class="highlighter-rouge">enumerate</code>:
    <div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>for i, character in enumerate(word):
  print(i, character)
</code></pre></div>    </div>
  </li>
  <li>lambda</li>
  <li>deep copy</li>
</ul>
:ET