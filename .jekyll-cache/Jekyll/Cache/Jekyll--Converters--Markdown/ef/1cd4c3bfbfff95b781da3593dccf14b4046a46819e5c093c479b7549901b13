I"¢p<p><img src="/static/imgs/aet-nipt.jpg" alt="atomic electron tomography" width="100%" /></p>

<!--more-->

<h3 id="tomography-background">Tomography background</h3>
<ul>
  <li>Tomography aims to reconstruct a 3D representation of an object based on its 2D projection images</li>
  <li>This is the principle behind CT scans that you see in hospitals</li>
  <li>Experimentally, projections are acquired by tilting the camera or the sample with respect to each other</li>
  <li>When imaging objects on the nanoscale, undesirable background often reduces the quality of reconstruction</li>
  <li>Background subtraction is a necessary step of projection preprocessing since tomography assumes the object to be isolated</li>
</ul>

<p><img src="/static/imgs/tem-grid.jpg" alt="tem-grid" /></p>

<h3 id="current-methods">Current methods</h3>
<ul>
  <li>Conventionally, background is estimated by either subtracting a constant value from the entire image,</li>
  <li>Or by creating a mask of the object of interest and use Laplaceâ€™s equation to estimate and subtract background.</li>
  <li>Such methods are either too crude, or required segmenting the object and creating a mask in order to form the boundary for estimation, and also oftentimes requires manually-chosen tuning parameters for optimal performance.</li>
</ul>

<h3 id="goal">Goal</h3>
<p>Given a series of tomography projection images corrupted by unwanted background, is it possible to train a CNN to subtract the background from the object of interest?</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">numpy</span> <span class="k">as</span> <span class="n">np</span>
<span class="kn">import</span> <span class="nn">matplotlib.pyplot</span> <span class="k">as</span> <span class="n">plt</span>
<span class="kn">import</span> <span class="nn">pandas</span> <span class="k">as</span> <span class="n">pd</span>
<span class="kn">import</span> <span class="nn">scipy.io</span> <span class="k">as</span> <span class="n">sio</span>
<span class="kn">from</span> <span class="nn">scipy.ndimage.filters</span> <span class="kn">import</span> <span class="n">gaussian_filter</span>
<span class="kn">import</span> <span class="nn">cv2</span>
<span class="kn">import</span> <span class="nn">glob</span>
<span class="o">%</span><span class="n">matplotlib</span> <span class="n">inline</span>
</code></pre></div></div>

<h2 id="analytics-approach">Analytics approach</h2>
<ul>
  <li>Use a <strong>feed-forward denoising convolutional neural networks</strong> (<a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=7839189">DnCNN</a>) backbone to train a model to recognize background in atomic electron tomography (AET) projection images</li>
  <li>DnCNN implicitly removes the latent clean image with the operations in the hidden layers. It uses <strong>residual learning</strong> and <strong>batch normalization</strong> (normalizes output of previous activation layer by subtracting the batch mean and dividing by the batch standard deviation) to speed up the training process as well as boost the denoising performance.</li>
  <li>Residual learning is used since residual image is easier to be learned than the original unreferenced mapping in a very deep neural network</li>
  <li>Image formation forward model follows this image degradation model:
<script type="math/tex">y = x + N</script>
Where <em>y</em> is the measured image, <em>x</em> is the uncorrupted true image, and <em>N</em> is artifact, or in this case, unwanted background. DnCNN attempts to fnd <em>N</em> and subtract from <em>x</em>.</li>
</ul>

<p>DnCNN architecture:</p>

<p><img src="/static/imgs/DnCNN-network.png" alt="dncnn-network" width="100%" /></p>

<ul>
  <li>1 layer: Conv+relu</li>
  <li>15 layers: Conv+BN+relu</li>
  <li>1 layer: Conv</li>
</ul>

<p><img src="/static/imgs/DnCNN-denoised-images.png" alt="dncnn-denoised" width="80%" /></p>

<h1 id="data-understanding">Data understanding</h1>
<p>To understand what background in actual experimental data looks like, letâ€™s check some raw projection tilt series. Notice that the background is mostly smooth and uneven, with varying intensities and distributions between them.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_raw</span> <span class="o">=</span> <span class="n">sio</span><span class="o">.</span><span class="n">loadmat</span><span class="p">(</span><span class="s">'./data_aet/Raw/NiPt_Mo_FS_171118_t2_BM3D100_results.mat'</span><span class="p">)</span>
<span class="n">test_raw</span> <span class="o">=</span> <span class="n">test_raw</span><span class="p">[</span><span class="s">'Dset'</span><span class="p">]</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="mi">60</span><span class="p">,</span> <span class="mi">10</span><span class="p">):</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">c</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">test_raw</span><span class="p">[:,:,</span><span class="n">i</span><span class="p">],</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'jet'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'off'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>    
</code></pre></div></div>

<p><img src="/static/imgs/output_4_0.png" alt="png" width="80%" /></p>

<h2 id="data-requirements-and-collection">Data requirements and collection</h2>
<p>To acquire training data to train the model, multislice wave propagation method was used to simulate realistic STEM projection tilt series based on known atomic coordinates and elemental species. In this case parameters for nickel platinum is used. The <strong>simulated tilt series without background</strong> look like this:</p>

<p><img src="/static/imgs/aet-projections-clean.gif" alt="" width="50%" /></p>

<p>Each individual dot represents the electron density from an individual atom. In this particle there are more than 10,000 atoms.</p>

<p>The smooth background was then simulated as <strong>Gaussian-smoothed random image</strong>, as seen below.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">gen_nubg</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">z</span><span class="p">):</span> 
    <span class="s">'''generate non-uniform backgrounds (nuBG) for AET BG estimation'''</span>
    <span class="n">background</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">zeros</span><span class="p">((</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">,</span> <span class="n">z</span><span class="p">))</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">z</span><span class="p">):</span>
        <span class="n">F</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span> <span class="mi">30</span><span class="p">)</span>
        <span class="n">background</span><span class="p">[:,:,</span><span class="n">i</span><span class="p">]</span> <span class="o">=</span> <span class="n">gaussian_filter</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randn</span><span class="p">(</span><span class="n">w</span><span class="p">,</span> <span class="n">h</span><span class="p">),</span> <span class="n">F</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">background</span>

<span class="n">background</span> <span class="o">=</span> <span class="n">gen_nubg</span><span class="p">(</span><span class="mi">256</span><span class="p">,</span> <span class="mi">256</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">background</span><span class="p">),</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'jet'</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/static/imgs/output_6_0.png" alt="png" width="50%" /></p>

<h2 id="data-preparation">Data preparation</h2>

<ul>
  <li>The training images (clean+background) are augmented (flipped up-down and rotated by 90 degrees) to generate more training data and</li>
  <li>Divided into 215,460 patches, each 40x40 in size, for faster and more effective training</li>
</ul>

<p>Below you can see an example patch.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">aet_patch</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'./data_aet/Train/npy_data/clean_patches.npy'</span><span class="p">)</span>
<span class="n">bg_patch</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">load</span><span class="p">(</span><span class="s">'./data_aet/Train/npy_data/nu_backgrounds.npy'</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">aet_patch</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">bg_patch</span><span class="o">.</span><span class="n">shape</span><span class="p">)</span>

<span class="n">idx</span> <span class="o">=</span> <span class="mi">21000</span>

<span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">ncols</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
<span class="n">f1</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">bg_patch</span><span class="p">[</span><span class="n">idx</span><span class="p">,:,:]),</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'jet'</span><span class="p">)</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s">'Background'</span><span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">f1</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
<span class="n">f2</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">aet_patch</span><span class="p">[</span><span class="n">idx</span><span class="p">,:,:]),</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'jet'</span><span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">f2</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s">'Clean image'</span><span class="p">)</span>
<span class="n">f3</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">aet_patch</span><span class="p">[</span><span class="n">idx</span><span class="p">,:,:])</span> <span class="o">+</span> <span class="n">np</span><span class="o">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">bg_patch</span><span class="p">[</span><span class="n">idx</span><span class="p">,:,:]),</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'jet'</span><span class="p">)</span>
<span class="n">fig</span><span class="o">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">f3</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
<span class="n">ax</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s">'Corrupt'</span><span class="p">)</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>(215460, 40, 40)
(215460, 40, 40)
</code></pre></div></div>

<p><img src="/static/imgs/output_8_1.png" alt="png" width="100%" /></p>

<h2 id="modeling">Modeling</h2>

<p>For training the network:</p>
<ul>
  <li>Training data is divided into 90%-10% training (162) and validation (18) split</li>
  <li>Uses TF-Keras implementation of DnCNN</li>
  <li>Optimizer: Adam</li>
  <li>Learning rate: 1e-3</li>
  <li>Error metric: mean square error</li>
  <li>Epoch: 51</li>
  <li>Training time: ~12 hours on Nvidia P4 GPU (computer clusters)</li>
  <li>Also calculated SSIM and PSNR</li>
</ul>

<p>Training error is shown below. More epochs can improve performance as it does not seem to have converged yet.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'./snapshot/save_DnCNN_sigma25_2019-08-28-15-32-13/log.csv'</span><span class="p">)</span>
<span class="n">ax_df</span> <span class="o">=</span> <span class="n">df</span><span class="o">.</span><span class="n">plot</span><span class="p">(</span><span class="n">x</span><span class="o">=</span><span class="s">'epoch'</span><span class="p">,</span> <span class="n">y</span><span class="o">=</span><span class="s">'loss'</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">10</span><span class="p">,</span><span class="mi">6</span><span class="p">))</span>
<span class="n">ax_df</span><span class="o">.</span><span class="n">set_ylabel</span><span class="p">(</span><span class="s">'MSE loss'</span><span class="p">);</span>
</code></pre></div></div>

<p><img src="/static/imgs/output_10_0.png" alt="png" width="80%" /></p>

<h2 id="validation-results">Validation results</h2>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">fnames</span> <span class="o">=</span> <span class="n">glob</span><span class="o">.</span><span class="n">glob</span><span class="p">(</span><span class="s">'./results/val/*.mat'</span><span class="p">)</span>
<span class="n">iid</span> <span class="o">=</span> <span class="mi">13</span>

<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="p">[</span><span class="n">iid</span><span class="p">]:</span>
    <span class="n">f</span> <span class="o">=</span> <span class="n">sio</span><span class="o">.</span><span class="n">loadmat</span><span class="p">(</span><span class="n">fnames</span><span class="p">[</span><span class="n">i</span><span class="p">])</span>
    <span class="n">fig</span><span class="p">,</span> <span class="n">ax</span> <span class="o">=</span> <span class="n">plt</span><span class="o">.</span><span class="n">subplots</span><span class="p">(</span><span class="n">nrows</span><span class="o">=</span><span class="mi">1</span><span class="p">,</span> <span class="n">ncols</span><span class="o">=</span><span class="mi">3</span><span class="p">,</span> <span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">17</span><span class="p">,</span> <span class="mi">4</span><span class="p">))</span>
    <span class="n">f1</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="s">'clean_img'</span><span class="p">]),</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'jet'</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">f1</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">])</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s">'Clean'</span><span class="p">)</span>
    <span class="n">f2</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="s">'test_img'</span><span class="p">]),</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'jet'</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">f2</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">])</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s">'Corrupt'</span><span class="p">)</span>
    <span class="n">f3</span> <span class="o">=</span> <span class="n">ax</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">np</span><span class="o">.</span><span class="n">squeeze</span><span class="p">(</span><span class="n">f</span><span class="p">[</span><span class="s">'out_img'</span><span class="p">]),</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'jet'</span><span class="p">)</span>
    <span class="n">fig</span><span class="o">.</span><span class="n">colorbar</span><span class="p">(</span><span class="n">f3</span><span class="p">,</span> <span class="n">ax</span><span class="o">=</span><span class="n">ax</span><span class="p">[</span><span class="mi">2</span><span class="p">])</span>
    <span class="n">ax</span><span class="p">[</span><span class="mi">2</span><span class="p">]</span><span class="o">.</span><span class="n">title</span><span class="o">.</span><span class="n">set_text</span><span class="p">(</span><span class="s">'Processed'</span><span class="p">)</span>
</code></pre></div></div>

<p><img src="/static/imgs/output_12_0.png" alt="png" width="100%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">df2</span> <span class="o">=</span> <span class="n">pd</span><span class="o">.</span><span class="n">read_csv</span><span class="p">(</span><span class="s">'./results/val/metrics.csv'</span><span class="p">)</span>
<span class="n">df2</span><span class="o">.</span><span class="n">mean</span><span class="p">()</span>
</code></pre></div></div>

<div class="highlighter-rouge"><div class="highlight"><pre class="highlight"><code>Unnamed: 0     9.000000
psnr          42.316029
ssim           0.990934
dtype: float64
</code></pre></div></div>

<p>SSIM of processed image is very high, suggesting background subtraction was successful.</p>

<h2 id="evaluation-on-experimental-data">Evaluation on experimental data</h2>
<p>The train model is tested on 60 experimental images.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_raw</span> <span class="o">=</span> <span class="n">sio</span><span class="o">.</span><span class="n">loadmat</span><span class="p">(</span><span class="s">'./data_aet/Raw/NiPt_Mo_FS_171118_t2_BM3D100_results.mat'</span><span class="p">)</span>
<span class="n">test_raw</span> <span class="o">=</span> <span class="n">test_raw</span><span class="p">[</span><span class="s">'Dset'</span><span class="p">]</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">idx</span> <span class="o">=</span> <span class="n">np</span><span class="o">.</span><span class="n">random</span><span class="o">.</span><span class="n">randint</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">test_raw</span><span class="o">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">2</span><span class="p">],</span> <span class="mi">6</span><span class="p">)</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">idx</span><span class="p">:</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">c</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">test_raw</span><span class="p">[:,:,</span><span class="n">i</span><span class="p">],</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'jet'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'off'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>    
    <span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>    
</code></pre></div></div>

<p><img src="/static/imgs/output_16_0.png" alt="png" width="80%" /></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">test_res</span> <span class="o">=</span> <span class="n">sio</span><span class="o">.</span><span class="n">loadmat</span><span class="p">(</span><span class="s">'./results/exp/NiPt_Mo_DnCNN_predictions.mat'</span><span class="p">)</span>
<span class="n">test_res</span> <span class="o">=</span> <span class="n">test_res</span><span class="p">[</span><span class="s">'img_new'</span><span class="p">]</span>
<span class="n">plt</span><span class="o">.</span><span class="n">figure</span><span class="p">(</span><span class="n">figsize</span><span class="o">=</span><span class="p">(</span><span class="mi">15</span><span class="p">,</span><span class="mi">10</span><span class="p">))</span>
<span class="n">c</span> <span class="o">=</span> <span class="mi">1</span>
<span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="n">idx</span><span class="p">:</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">subplot</span><span class="p">(</span><span class="mi">2</span><span class="p">,</span><span class="mi">3</span><span class="p">,</span><span class="n">c</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">imshow</span><span class="p">(</span><span class="n">test_res</span><span class="p">[:,:,</span><span class="n">i</span><span class="p">],</span> <span class="n">cmap</span><span class="o">=</span><span class="s">'jet'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">axis</span><span class="p">(</span><span class="s">'off'</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">title</span><span class="p">(</span><span class="n">i</span><span class="p">)</span>
    <span class="n">plt</span><span class="o">.</span><span class="n">tight_layout</span><span class="p">()</span>
    <span class="n">c</span> <span class="o">+=</span> <span class="mi">1</span>  
</code></pre></div></div>

<p><img src="/static/imgs/output_17_0.png" alt="png" width="80%" /></p>

<h2 id="conclusion">Conclusion</h2>

<p>I adapted a deep learning denoising framework (DnCNN) for doing background subtraction in atomic electron tomography preprocessing. The idea is that such supervised, discriminative learning can be part of a general data preprocessing pipeline for tomography reconstruction.</p>

<h3 id="future-improvements">Future improvements</h3>
<ul>
  <li>This model is trained on pretty basic estimation of background (Gaussian). A more sophisticated model of the background can help train better model</li>
  <li>Train images with different features separately can maybe enhance training quality. Some projection images taken along zone axis contains much</li>
</ul>

:ET